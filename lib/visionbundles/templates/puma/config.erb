<% app_root = "/home/rails/apps/#{application}/current" %>
# The directory to operate out of.
#
# The default is the current directory.
#
directory '<%= app_root %>'

# Use an object or block as the rack application. This allows the
# config file to be the application itself.
#
# app do |env|
#   puts env
#
#   body = 'Hello, World!'
#
#   [200, { 'Content-Type' => 'text/plain', 'Content-Length' => body.length.to_s }, [body]]
# end

# Load “path” as a rackup file.
#
# The default is “config.ru”.
#
# rackup '/u/apps/lolcat/config.ru'

# Set the environment in which the rack's app will run. The value must be a string.
#
# The default is “development”.
#
# environment 'production'

# Daemonize the server into the background. Highly suggest that
# this be combined with “pidfile” and “stdout_redirect”.
#
# The default is “false”.
#
daemonize
# daemonize false

# Store the pid of the server in the file at “path”.
#
pidfile "<%= app_root %>/tmp/pids/puma.pid"

# Use “path” as the file to store the server info state. This is
# used by “pumactl” to query and control the server.
#
# state_path '/u/apps/lolcat/tmp/pids/puma.state'

# Redirect STDOUT and STDERR to files specified. The 3rd parameter
# (“append”) specifies whether the output is appended, the default is
# “false”.
#
stdout_redirect "<%= app_root %>/log/puma_stdout.log", "<%= app_root %>/log/puma_stderr.log"
# stdout_redirect '/u/apps/lolcat/log/stdout', '/u/apps/lolcat/log/stderr'
# stdout_redirect '/u/apps/lolcat/log/stdout', '/u/apps/lolcat/log/stderr', true

# Disable request logging.
#
# The default is “false”.
#
# quiet

# Configure “min” to be the minimum number of threads to use to answer
# requests and “max” the maximum.
#
# The default is “0, 16”.
#
threads <%= puma_thread_min %>, <%= puma_thread_max %>

# Bind the server to “url”. “tcp://”, “unix://” and “ssl://” are the only
# accepted protocols.
#
# The default is “tcp://0.0.0.0:9292”.
#
<%=
  case puma_bind_for
  when :sock_file
    %(bind "unix:///tmp/#{application}.sock")
  when :tcp
    if puma_bind_to.is_a? String
      %(bind 'tcp://#{puma_bind_to}:#{puma_bind_port}')
    elsif puma_bind_to.is_a? Hash
      puma_bind_ip[current_server] ||= '0.0.0.0'
      %(bind 'tcp://#{puma_bind_ip[current_server]}:#{puma_bind_port}')
    end
  end
%>
# bind 'tcp://0.0.0.0:9293'
# bind 'unix:///var/run/puma.sock?umask=0777'
# bind 'ssl://127.0.0.1:9292?key=path_to_key&cert=path_to_cert'

# Instead of “bind 'ssl://127.0.0.1:9292?key=path_to_key&cert=path_to_cert'” you
# can also use the “ssl_bind” option.
#
# ssl_bind '127.0.0.1', '9292', { key: path_to_key, cert: path_to_cert }

# Code to run before doing a restart. This code should
# close log files, database connections, etc.
#
# This can be called multiple times to add code each time.
#
# on_restart do
#   puts 'On restart...'
# end

# Command to use to restart puma. This should be just how to
# load puma itself (ie. 'ruby -Ilib bin/puma'), not the arguments
# to puma, as those are the same as the original process.
#
# restart_command '/u/app/lolcat/bin/restart_puma'

# === Cluster mode ===

# How many worker processes to run.
#
# The default is “0”.
#
workers <%= puma_workers %>

# Code to run when a worker boots to setup the process before booting
# the app.
#
# This can be called multiple times to add hooks.
#

on_worker_boot do
  <% if preload_app && puma_on_boot_connection_to_activerecord %>
    ActiveSupport.on_load(:active_record) do
      ActiveRecord::Base.establish_connection
    end
  <% end %>
end

# Code to run when a worker boots to setup the process after booting
# the app.
#
# This can be called multiple times to add hooks.
#
# after_worker_boot do
#   puts 'On worker boot...'
# end

# Allow workers to reload bundler context when master process is issued
# a USR1 signal. This allows proper reloading of gems while the master
# is preserved across a phased-restart. (incompatible with preload_app)
# (off by default)

<%= if puma_prune_bundler then 'prune_bundler' end %>

# Preload the application before starting the workers; this conflicts with
# phased restart feature. (off by default)

<%= if puma_preload_app then 'preload_app!' end %>

# Additional text to display in process listing
#
tag '<%= application %>'

# Change the default timeout of workers
#
<%= if puma_worker_timeout then "worker_timeout #{puma_worker_timeout}" end %>

# === Puma control rack application ===

# Start the puma control rack application on “url”. This application can
# be communicated with to control the main server. Additionally, you can
# provide an authentication token, so all requests to the control server
# will need to include that token as a query parameter. This allows for
# simple authentication.
#
# Check out https://github.com/puma/puma/blob/master/lib/puma/app/status.rb
# to see what the app has available.
#
# activate_control_app 'unix:///var/run/pumactl.sock'
# activate_control_app 'unix:///var/run/pumactl.sock', { auth_token: '12345' }
# activate_control_app 'unix:///var/run/pumactl.sock', { no_token: true }